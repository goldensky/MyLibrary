# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2018-08-20 14:45
from __future__ import unicode_literals

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, max_length=254, unique=True, verbose_name='Email Address')),
                ('username', models.CharField(blank=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, null=True, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.', 'invalid')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('timezone', models.CharField(default='Europe/Moscow', max_length=50)),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('headshot', models.ImageField(blank=True, null=True, upload_to='photos/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('website', models.URLField(blank=True, null=True)),
                ('country', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.TextField(default='')),
            ],
            options={
                'verbose_name': 'Author',
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('init_title', models.CharField(max_length=200)),
                ('pages', models.IntegerField(default=0)),
                ('published_year', models.DateTimeField(blank=True, null=True)),
                ('slug', models.SlugField(default='title')),
                ('language', models.CharField(choices=[('English', 'English'), ('Russian', 'Russian'), ('Other', 'Other')], default='Other', max_length=50)),
                ('publisher', models.CharField(blank=True, max_length=100, null=True)),
                ('stars', models.IntegerField(default=0)),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(default='')),
                ('img', models.ImageField(blank=True, null=True, upload_to='photos/')),
                ('file', models.FileField(blank=True, null=True, upload_to='file_storage/')),
                ('author', models.ManyToManyField(to='library.Author')),
            ],
            options={
                'verbose_name': 'Book',
            },
        ),
        migrations.CreateModel(
            name='FileType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_type', models.CharField(max_length=10)),
            ],
            options={
                'verbose_name': 'File Type',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre_name', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name': 'Genre',
            },
        ),
        migrations.AddField(
            model_name='book',
            name='file_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.FileType'),
        ),
        migrations.AddField(
            model_name='book',
            name='genre',
            field=models.ManyToManyField(to='library.Genre'),
        ),
    ]
